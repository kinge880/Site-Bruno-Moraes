from django.core.management.base import BaseCommand
from customers.models import Cliente, Domain
from django.db import IntegrityError

class Command(BaseCommand):
    help = 'Cria um novo tenant (cliente) com dom√≠nio prim√°rio'

    def handle(self, *args, **options):
        print("üîß Cria√ß√£o de novo tenant FlowBi\n")

        nome = input("‚û°Ô∏è Nome do cliente: ").strip()
        schema_name = input("‚û°Ô∏è Nome do schema (ex: mercale): ").strip()
        email_contato = input("‚û°Ô∏è E-mail de contato: ").strip()

        dominio = input("‚û°Ô∏è Dom√≠nio principal (ex: mercale.localhost): ").strip().lower()

        if schema_name == "public":
            self.stderr.write(self.style.ERROR("‚ùå O schema 'public' √© reservado. Escolha outro nome."))
            return

        if Cliente.objects.filter(schema_name=schema_name).exists():
            self.stderr.write(self.style.ERROR(f"‚ùå J√° existe um schema '{schema_name}'"))
            return

        if Domain.objects.filter(domain=dominio).exists():
            self.stderr.write(self.style.ERROR(f"‚ùå O dom√≠nio '{dominio}' j√° est√° em uso"))
            return

        try:
            cliente = Cliente.objects.create(
                nome=nome,
                schema_name=schema_name,
                email_contato=email_contato
            )

            Domain.objects.create(
                domain=dominio,
                tenant=cliente,
                is_primary=True
            )

            self.stdout.write(self.style.SUCCESS(
                f"\n‚úÖ Cliente '{nome}' criado com sucesso!"
            ))
            self.stdout.write(self.style.SUCCESS(
                f"üåê Dom√≠nio principal: http://{dominio}"
            ))
            self.stdout.write(self.style.SUCCESS(
                f"üóÇÔ∏è Schema: {schema_name}"
            ))
        except IntegrityError as e:
            self.stderr.write(self.style.ERROR(f"‚ùå Erro ao criar tenant: {e}"))
